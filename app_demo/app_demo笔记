这次自己创建了一个app_demo项目，该项目包含了页面（发送请求），路由（导航资源），主应用程序（导航到的资源做处理，返回给页面）
1.一个nodejs项目会包含package.json文件，该文件内容如下
		{
			"name":"app_demo",         name 对项目进行描述，可当做项目名称
			"main":"app.js",           必须的，用于指定项目的起始启动项，不写，默认找index.js
			"dependencies":{
				"express":"*",      dependencies属性很重要，用来引入项目所需要的第三方库，及其版本，引入后，在项目所在文件夹下的终端执行 npm install就会						    把package.json里dependencies引入的包下载在自动创建的node_module文件夹下
				"body-Parser":"*"
			}
		}

2.主应用程序app.js中，也可以直接根据页面的请求进行导航，并作出处理，但一般可以把路由处理放在单独的router.js中，防止主程序代码太厚重，这个项目中借住require(router.js)跳转到路由处理的js文件，在更改路由配置，只需要更改router.js，不用改主程序。

3.路由处理router.js中，使用的是express库的get(),use()方法，不同的库用其对应的路由处理方法，处理的函数根据需要进行处理，如返回请求头的相关信息，或返回页面内容，也可以返回一个静态文件。

4.页面可以放在views文件夹下，写页面代码


app
  --views
  --utils
  --model 
  --router (controller)
  package.json
  --main.js

-----------------------------------------------------------------------------------------------------------------------------------------------------------
第二个实践的例子是form表单提交数据，并将数据插入mysql数据库表里。

1.启动服务器，让服务器监听某个端口（1337）.
2.在浏览器输入连接，（user/insert），浏览器返回一个form表单的页面。
3.填写input框，提交表单，提交的地址经过路由匹配，在对应的路由方法下写处理函数，该函数的处理过程是：
	首先拿到请求的两个参数。
	其次，调用model下的方法对参数进行规范处理。
	jdbc用于直接操作数据库，model调用jdbc，把规范处理后的数据传入jdbc下的DBHlper.js方法，进行操作。



1，启动服务器，什么是服务器，它起始就是一个无线循环的进程，为什么需要无线循环：因为它要不断的监听不同的用户。服务器启动的时候需要设置host和port，这个host：port就指向了这个进程，我们就可以通过这个host:port进行访问这个进程。

2，app.js

--------------------------------------
var express = require("express");
var bodyParser = require("body-parser");
var conf = require("./util/readConf.js");
var app = express();

app.use('/user/b',funciton process_name(){处理过程});
app.use('/user/a',funciton process_name(){处理过程});
app.use('/user',function process_name() {处理过程});    
这个/user就是hostpath,放用户方法host:port/user的时候，服务器就会执行这个走这个事件，他会使用function_name进行处理，如果这个处理过程如下：
1，进行数据变化
2，******
3，写入数据库

如果这3个步骤需要写1000行代码，那么这个app.js将会很大，如果我们需要写多个app.use('/**/**',function ...),那么这个app。js就会更大，因为app。js里面需要
进行路由的匹配，数据的各种处理，所以我们一般会把路由的处理专门写成一个文件，然后把数据处理写成一个文件。app.js调用路由处理，然后路由处理调用数据处理。
这个样子就会做到模块化。

app.listen(port);//服务启动
-------------------------------------------------------------------------



加入router。js以后我们的app。js的变化
--------------------------------------------------

app.use('/user',require('./routes/router.js'));

app.listen(port);//服务启动
------------------------------------------------------
router.js
-------------------------------------------

router.all('/b',function(req,res) { 数据处理}
router.all('/a',function(req,res) { 数据处理}
router.all('/',function(req,res) { 数据处理}
---------------------------------------------------
这种写法可以简化app.js里面的代码，app.js里只需要写有关服务器相关的处理，router.js进行路由导航,但是如果把数据处理全部写在router.js里，router.js里面需要进行
路由的到导航和数据的处理，又会导致router.js变得很大，所有我们一把的做法就是把数据处理专门写一个js文件，然后router调用该js进行数据处理

所以变化以后的router.js如下
router.all('/b',数据处理函数);
router.all('/a',数据处理函数);
router.all('/',数据处理函数);

我们一般的做法是把数据处理函数写在model文件夹下。

我们一般在数据处理的时候，经常会需要使用各种工具，例如读取配置文件，例如操作数据库，例如json字符串的处理，我们一般不会把他们全部放到model里进行写，如果这个样子，
model里的数据处理程序会很大，并且不能够重复利用，例如我们的model下有10个处理函数的js文件，a.js,b.js,c.js......,其中a.js里面需要从数据库查询数据，那么a.js会包括
数据库的链接，查询，关闭，如果b.js里也需要查询数据库，那么b.js里面也许要数据库的链接，查询，关闭代码，这个样子代码的冗余就会很大，重复工作太多。所以我们一般把
数据库的相关操作写在一个文件里，把读取配置文件的操作写在一个文件里，把sjon字符从的处理写在一个文件里面等等。我们一般有一个常规的做法，就是把数据库的相关操作写在
jdbc文件夹下面，读取配置文件和字符从的处理等写在utils文件下下面，具体的配置文件我们卸载conf文件夹下

所以项目的一般组织如下
app
  --views
  --utils
  --model
  --jdbc
  --utils
  --conf
  --router (controller)
  package.json
  --main.js





